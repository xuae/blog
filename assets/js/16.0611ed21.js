(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{495:function(t,v,e){"use strict";e.r(v);var _=e(4),r=Object(_.a)({},(function(){var t=this,v=t.$createElement,e=t._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("Boxx"),t._v(" "),e("h2",{attrs:{id:"简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),e("p",[t._v("设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。")]),t._v(" "),e("p",[t._v("使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。")]),t._v(" "),e("h2",{attrs:{id:"原则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原则"}},[t._v("#")]),t._v(" 原则")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",[t._v("详细的原则解释可查看 "),e("a",{attrs:{href:"https://www.cnblogs.com/WindSun/p/10223080.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.cnblogs.com/WindSun/p/10223080.html"),e("OutboundLink")],1)])]),t._v(" "),e("ol",[e("li",[e("p",[e("strong",[t._v("单一职责原则 (Single Responsibility Principle, SRP)")])]),t._v(" "),e("ul",[e("li",[t._v("一个程序只做好一件事")]),t._v(" "),e("li",[t._v("如果功能过于复杂就拆分开，每个部分保持独立")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("开闭原则（Open Close Principle）")])]),t._v(" "),e("ul",[e("li",[t._v("对扩展开放，对修改关闭")]),t._v(" "),e("li",[t._v("增加需求时，扩展新代码，而非修改已有代码")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("里氏代换原则（Liskov Substitution Principle）")])]),t._v(" "),e("ul",[e("li",[t._v("对开闭原则的补充")]),t._v(" "),e("li",[t._v("子类能覆盖父类")]),t._v(" "),e("li",[t._v("父类能出现的地方子类就能出现")]),t._v(" "),e("li",[t._v("尽量把父类设计成抽象类或接口，让子类继承父类或实现父接口。增加一个新功能时，通过增加一个新的子类来实现")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("依赖倒转原则（Dependence Inversion Principle）")])]),t._v(" "),e("ul",[e("li",[t._v("以里氏代换原则为基础")]),t._v(" "),e("li",[t._v("针对接口编程，依赖于抽象而不依赖于具体")]),t._v(" "),e("li",[t._v("使用方只关注接口而不关注具体类的实现")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("接口隔离原则（Interface Segregation Principle）")])]),t._v(" "),e("ul",[e("li",[t._v("保持接口的单一独立")]),t._v(" "),e("li",[t._v("类似单一职责原则，这里更关注接口")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("迪米特法则，又称最少知道原则（Demeter Principle）")])]),t._v(" "),e("ul",[e("li",[t._v("一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("合成复用原则（Composite Reuse Principle）")])]),t._v(" "),e("ul",[e("li",[t._v("尽量使用合成/聚合的方式，而不是使用继承")])])])]),t._v(" "),e("h2",{attrs:{id:"类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型"}},[t._v("#")]),t._v(" 类型")]),t._v(" "),e("p",[t._v("根据设计模式的参考书 Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素） 中所提到的，总共有 23 种设计模式。")]),t._v(" "),e("p",[t._v("这些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。当然，我们还会讨论另一类设计模式：J2EE 设计模式。")]),t._v(" "),e("ol",[e("li",[e("p",[e("strong",[t._v("创建型模式")])]),t._v(" "),e("p",[t._v("这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。")]),t._v(" "),e("ul",[e("li",[t._v("工厂模式（Factory Pattern）")]),t._v(" "),e("li",[t._v("抽象工厂模式（Abstract Factory Pattern）")]),t._v(" "),e("li",[t._v("单例模式（Singleton Pattern）")]),t._v(" "),e("li",[t._v("建造者模式（Builder Pattern）")]),t._v(" "),e("li",[t._v("原型模式（Prototype Pattern）")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("结构型模式")])]),t._v(" "),e("p",[t._v("这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。")]),t._v(" "),e("ul",[e("li",[t._v("适配器模式（Adapter Pattern）")]),t._v(" "),e("li",[t._v("桥接模式（Bridge Pattern）")]),t._v(" "),e("li",[t._v("过滤器模式（Filter、Criteria Pattern）")]),t._v(" "),e("li",[t._v("组合模式（Composite Pattern）")]),t._v(" "),e("li",[t._v("装饰器模式（Decorator Pattern）")]),t._v(" "),e("li",[t._v("外观模式（Facade Pattern）")]),t._v(" "),e("li",[t._v("享元模式（Flyweight Pattern）")]),t._v(" "),e("li",[t._v("代理模式（Proxy Pattern）")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("行为型模式")])]),t._v(" "),e("p",[t._v("这些设计模式特别关注对象之间的通信。")]),t._v(" "),e("ul",[e("li",[t._v("责任链模式（Chain of Responsibility Pattern）")]),t._v(" "),e("li",[t._v("命令模式（Command Pattern）")]),t._v(" "),e("li",[t._v("解释器模式（Interpreter Pattern）")]),t._v(" "),e("li",[t._v("迭代器模式（Iterator Pattern）")]),t._v(" "),e("li",[t._v("中介者模式（Mediator Pattern）")]),t._v(" "),e("li",[t._v("备忘录模式（Memento Pattern）")]),t._v(" "),e("li",[t._v("观察者模式（Observer Pattern）")]),t._v(" "),e("li",[t._v("状态模式（State Pattern）")]),t._v(" "),e("li",[t._v("空对象模式（Null Object Pattern）")]),t._v(" "),e("li",[t._v("策略模式（Strategy Pattern）")]),t._v(" "),e("li",[t._v("模板模式（Template Pattern）")]),t._v(" "),e("li",[t._v("访问者模式（Visitor Pattern）")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("J2EE 模式")])]),t._v(" "),e("p",[t._v("这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的。")]),t._v(" "),e("ul",[e("li",[t._v("MVC 模式（MVC Pattern）")]),t._v(" "),e("li",[t._v("业务代表模式（Business Delegate Pattern）")]),t._v(" "),e("li",[t._v("组合实体模式（Composite Entity Pattern）")]),t._v(" "),e("li",[t._v("数据访问对象模式（Data Access Object Pattern）")]),t._v(" "),e("li",[t._v("前端控制器模式（Front Controller Pattern）")]),t._v(" "),e("li",[t._v("拦截过滤器模式（Intercepting Filter Pattern）")]),t._v(" "),e("li",[t._v("服务定位器模式（Service Locator Pattern）")]),t._v(" "),e("li",[t._v("传输对象模式（Transfer Object Pattern）")])])])]),t._v(" "),e("h2",{attrs:{id:"工厂模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工厂模式"}},[t._v("#")]),t._v(" 工厂模式")])],1)}),[],!1,null,null,null);v.default=r.exports}}]);