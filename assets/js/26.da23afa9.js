(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{546:function(e,v,_){"use strict";_.r(v);var a=_(5),t=Object(a.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("Boxx"),e._v(" "),_("h2",{attrs:{id:"前言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),_("p",[e._v("这篇文章我们主要来聊一聊浏览器的两种缓存机制：强缓存和协商缓存。")]),e._v(" "),_("h2",{attrs:{id:"介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),_("p",[e._v("浏览器缓存分为强缓存与协商缓存两种方式：")]),e._v(" "),_("ul",[_("li",[e._v("强缓存是由 "),_("code",[e._v("Header")]),e._v(" 里的 "),_("code",[e._v("Expires")]),e._v(" 字段实现的。")]),e._v(" "),_("li",[e._v("协商缓存有两种方式：\n"),_("ul",[_("li",[e._v("使用 "),_("code",[e._v("Last-Modified")]),e._v(" 和 "),_("code",[e._v("If-Modified-Scene")]),e._v(" 实现。")]),e._v(" "),_("li",[e._v("使用 "),_("code",[e._v("ETag")]),e._v(" 和 "),_("code",[e._v("If-None-Match")]),e._v(" 实现。")])])])]),e._v(" "),_("h2",{attrs:{id:"强缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[e._v("#")]),e._v(" 强缓存")]),e._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"title"}),_("p",[_("strong",[e._v("强缓存和协商缓存最大的一个区别在于：强缓存在验证请求是否存在缓存时，不需要向服务器发送请求。")])])]),_("p",[e._v("当浏览器第一次向服务器发送请求时，服务器返回的返回头里如果设置了强缓存，浏览器会将请求返回内容与返回头一同存到浏览器缓存中。")]),e._v(" "),_("p",[e._v("当浏览器再次请求该改内容时，浏览器会先去缓存中寻找该请求，然后判断返回头里的缓存时间和当前客户端时间判断；如果在这时间之前的话，就直接重缓存中取得内容，"),_("code",[e._v("F12")]),e._v(" 打开控制面板查看网络会发现请求显示 "),_("code",[e._v("from cache")]),e._v("。")]),e._v(" "),_("h3",{attrs:{id:"如何开启强缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何开启强缓存"}},[e._v("#")]),e._v(" 如何开启强缓存")]),e._v(" "),_("p",[e._v("在 "),_("code",[e._v("Response Header")]),e._v(" 中使用 "),_("code",[e._v("Expires")]),e._v(" 或  "),_("code",[e._v("Cache-Control")]),e._v(" 即可。若二者同时存在，"),_("strong",[_("code",[e._v("Cache-Control")]),e._v(" 优先级高于 "),_("code",[e._v("Expires")]),e._v("。")])]),e._v(" "),_("h4",{attrs:{id:"expires"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#expires"}},[e._v("#")]),e._v(" Expires")]),e._v(" "),_("p",[_("code",[e._v("Expires")]),e._v(" 描述的是一个绝对时间，由服务器返回，用 "),_("code",[e._v("GMT")]),e._v(" 格式的字符串表示，如："),_("code",[e._v("Expires:Thu， 31 Dec 2037 23:55:55 GMT")]),e._v("。")]),e._v(" "),_("p",[e._v("当使用 "),_("code",[e._v("Expires")]),e._v(" 时，客户端将当前时间与 "),_("code",[e._v("Expires")]),e._v(" 的值作比较，若当前时间晚于 "),_("code",[e._v("Expires")]),e._v(" 时间，客户端将重新向服务器发起请求。")]),e._v(" "),_("h4",{attrs:{id:"cache-control"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[e._v("#")]),e._v(" Cache-Control")]),e._v(" "),_("p",[_("code",[e._v("Cache-Control")]),e._v(" 是一个相对时间，在配置缓存的时候，以秒为单位，用数值表示，如："),_("code",[e._v("Cache-Control:max-age=315360000")]),e._v("。")]),e._v(" "),_("p",[e._v("当使用 "),_("code",[e._v("Cache-Control")]),e._v(" 时，客户端会利用第一次请求时间与 "),_("code",[e._v("Cache-control")]),e._v(" 值计算出一个过期时间，如何与客户端当前时间作比较，晚于当前时间，则重新向服务器发送请求。")]),e._v(" "),_("h3",{attrs:{id:"强缓存的缺陷"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#强缓存的缺陷"}},[e._v("#")]),e._v(" 强缓存的缺陷")]),e._v(" "),_("p",[e._v("由于客户端判断是否需要重新请求服务器的时间，是由客户端决定的，所以，若客户端时间与服务器时间不一致时（或用户主动更改了客户端时间），将导致缓存管理混乱，无法实现缓存功能。")]),e._v(" "),_("h2",{attrs:{id:"协商缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[e._v("#")]),e._v(" 协商缓存")]),e._v(" "),_("p",[e._v("由于强缓存的缺陷，后来提出了另一种缓存方式，即协商缓存。")]),e._v(" "),_("p",[_("strong",[e._v("协商缓存顾名思义，需要由服务器和客户端共同决定是否使用缓存数据。所以协商缓存不管是否使用缓存数据，都会向服务器发送一条请求。")])]),e._v(" "),_("p",[e._v("服务器根据请求头中的 "),_("code",[e._v("If-Modified-Scene")]),e._v(" 或 "),_("code",[e._v("If-None-Match")]),e._v(" 来判断是否使用缓存内容。如果匹配成功，"),_("code",[e._v("F12")]),e._v(" 打开控制台查看请求会显示 "),_("code",[e._v("304")]),e._v(" 状态 "),_("code",[e._v("Not Modified")]),e._v("。浏览器读到返回后去缓存中取得请求内容。如果匹配失败则直接返回新的内容。")]),e._v(" "),_("p",[e._v("【"),_("code",[e._v("Last-Modified")]),e._v("、"),_("code",[e._v("If-Modified-Since")]),e._v("】和【"),_("code",[e._v("ETag")]),e._v("、"),_("code",[e._v("If-None-Match")]),e._v("】一般都是同时启用，这是为了处理 "),_("code",[e._v("Last-Modified")]),e._v(" 不可靠的情况。比如修改了客户端时间或是服务器上资源其实有变化，但是最后修改时间却没有变化的情况。")]),e._v(" "),_("h4",{attrs:{id:"last-modified-和-if-modified-scene"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#last-modified-和-if-modified-scene"}},[e._v("#")]),e._v(" Last-Modified 和 If-Modified-Scene")]),e._v(" "),_("p",[_("code",[e._v("Last-Modified")]),e._v(" 是一个相对时间，以秒为单位，用数值表示，如："),_("code",[e._v("Cache-Control:max-age=315360000")]),e._v("。")]),e._v(" "),_("p",[e._v("浏览器发送请求时会在请求头中添加 "),_("code",[e._v("If-Modified-Scene")]),e._v(" ，值为首次请求返回头中的 "),_("code",[e._v("Last-Modified")]),e._v("。服务器在接收到请求后，会根据服务器上文件最新修改时间和请求头中的 "),_("code",[e._v("If-Modified-Scene")]),e._v(" 作比较，确定是返回304 Not Modified 还是新的请求内容。")]),e._v(" "),_("h4",{attrs:{id:"etag-和-if-none-match"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#etag-和-if-none-match"}},[e._v("#")]),e._v(" ETag 和 If-None-Match")]),e._v(" "),_("p",[_("code",[e._v("ETag")]),e._v(" 是一个服务器为该请求资源生成的一个唯一标志。首次请求时由服务器返回。")]),e._v(" "),_("p",[e._v("浏览器再次请求该资源时，会在请求头中添加 "),_("code",[e._v("If-None-Match")]),e._v("。值为首次请求返回头中的 "),_("code",[e._v("ETag")]),e._v("。服务器在接收到请求后，会根据服务器上文件的唯一标志和请求头中的 "),_("code",[e._v("If-None-Match")]),e._v(" 作比较，确定是返回304 Not Modified还是新的请求内容。")]),e._v(" "),_("h3",{attrs:{id:"协商缓存的缺陷"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存的缺陷"}},[e._v("#")]),e._v(" 协商缓存的缺陷")]),e._v(" "),_("p",[e._v("分布式系统下，每一台服务器为同一资源生成的唯一标志可能不同。如果请求是随机节点的话，也可能会出现缓存失效的情况。")])],1)}),[],!1,null,null,null);v.default=t.exports}}]);